Directory: components

File:   BulkResultDisplay.js

// File: components/BulkResultDisplay.js

import React, { useState } from 'react';

export default function BulkResultDisplay({ results }) {
  const [expandedIndex, setExpandedIndex] = useState(null);

  if (!results || results.length === 0) {
    return <p>No results to display.</p>;
  }

  const toggleExpand = (index) => {
    setExpandedIndex(expandedIndex === index ? null : index);
  };

  const renderEmailTable = (email) => {
    if (!email) return null;
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">First Name</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Name</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Domain</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            <tr>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{email.email}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{email.first_name || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{email.last_name || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{email.email_status || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{email.domain || 'N/A'}</td>
            </tr>
          </tbody>
        </table>
      </div>
    );
  };

  const renderPhoneTable = (phone) => {
    if (!phone) return null;
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Raw Format</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">International Format</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">National Format</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Country</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            <tr>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{phone.raw_format || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{phone.international_format || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{phone.national_format || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                {phone.country_name ? `${phone.country_name} (${phone.country_code})` : 'N/A'}
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    );
  };

  const renderLinkedInTable = (linkedin) => {
    if (!linkedin) return null;
    return (
      <div className="space-y-4">
        {/* Basic Information */}
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/3">Basic Information</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-2/3">Details</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              <tr>
                <td className="px-6 py-4 text-sm font-medium text-gray-900">Full Name</td>
                <td className="px-6 py-4 text-sm text-gray-900">{linkedin.full_name || 'N/A'}</td>
              </tr>
              <tr>
                <td className="px-6 py-4 text-sm font-medium text-gray-900">Current Position</td>
                <td className="px-6 py-4 text-sm text-gray-900">{linkedin.job_title || 'N/A'}</td>
              </tr>
              <tr>
                <td className="px-6 py-4 text-sm font-medium text-gray-900">LinkedIn Profile</td>
                <td className="px-6 py-4 text-sm text-gray-900">
                  {linkedin.linkedin ? (
                    <a href={linkedin.linkedin} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                      View Profile
                    </a>
                  ) : 'N/A'}
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        {/* Company Information */}
        {linkedin.company && Object.keys(linkedin.company).length > 0 && (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Company Information</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Company Name</td>
                  <td className="px-6 py-4 text-sm text-gray-900">{linkedin.company.name || 'N/A'}</td>
                </tr>
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Industry</td>
                  <td className="px-6 py-4 text-sm text-gray-900">{linkedin.company.industry || 'N/A'}</td>
                </tr>
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Size</td>
                  <td className="px-6 py-4 text-sm text-gray-900">{linkedin.company.size || 'N/A'}</td>
                </tr>
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Website</td>
                  <td className="px-6 py-4 text-sm text-gray-900">
                    {linkedin.company.website ? (
                      <a href={linkedin.company.website} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                        {linkedin.company.website}
                      </a>
                    ) : 'N/A'}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </div>
    );
  };

  return (
    <div className="space-y-6">
      <h2 className="text-2xl font-semibold mb-4">Bulk Processing Results</h2>
      {results.map((result, index) => (
        <div key={index} className="bg-white shadow-lg rounded-lg overflow-hidden">
          <div 
            className="px-6 py-4 cursor-pointer flex justify-between items-center bg-purple-light"
            onClick={() => toggleExpand(index)}
          >
            <div>
              <h3 className="text-xl font-semibold text-white">{result.firstName} {result.lastName}</h3>
              <p className="text-md text-white">{result.linkedInData?.company?.name || result.emailData?.domain || 'Company not found'}</p>
            </div>
            <span className="text-2xl text-white">{expandedIndex === index ? '▲' : '▼'}</span>
          </div>
          {expandedIndex === index && (
            <div className="p-6 space-y-6">
              {result.emailData && (
                <div className="mb-6">
                  <h4 className="font-semibold text-lg mb-3 text-purple-dark">Email Information</h4>
                  {renderEmailTable(result.emailData)}
                </div>
              )}

              {result.phoneData && (
                <div className="mb-6">
                  <h4 className="font-semibold text-lg mb-3 text-purple-dark">Phone Information</h4>
                  {renderPhoneTable(result.phoneData)}
                </div>
              )}

              {result.linkedInData && (
                <div className="mb-6">
                  <h4 className="font-semibold text-lg mb-3 text-purple-dark">LinkedIn Information</h4>
                  {renderLinkedInTable(result.linkedInData)}
                </div>
              )}
            </div>
          )}
        </div>
      ))}
    </div>
  );
}
----------------------------------------

File:   BulkUpload.js

// File: components/BulkUpload.js

import { useState } from 'react';

export default function BulkUpload({ setResult, setIsLoading }) {
  const [file, setFile] = useState(null);
  const [headers, setHeaders] = useState([]);
  const [fieldMapping, setFieldMapping] = useState({
    firstName: '',
    lastName: '',
    profileUrl: ''
  });
  const [step, setStep] = useState('upload');

  const commonFieldMappings = {
    firstName: ['first name', 'firstname', 'given name'],
    lastName: ['last name', 'lastname', 'surname', 'family name'],
    profileUrl: ['profile url', 'linkedin url', 'linkedin profile', 'profile link']
  };

  const handleFileChange = (e) => {
    const selectedFile = e.target.files[0];
    setFile(selectedFile);

    const reader = new FileReader();
    reader.onload = (e) => {
      const content = e.target.result;
      const lines = content.split('\n');
      if (lines.length > 0) {
        const headerLine = lines[0];
        const headers = headerLine.split(',').map(header => header.trim());
        setHeaders(headers);
        autoMapFields(headers);
      }
    };
    reader.readAsText(selectedFile);
    setStep('mapping');
  };

  const autoMapFields = (headers) => {
    const newFieldMapping = { ...fieldMapping };
    headers.forEach((header) => {
      const lowerHeader = header.toLowerCase();
      Object.entries(commonFieldMappings).forEach(([field, possibleNames]) => {
        if (possibleNames.some(name => lowerHeader.includes(name))) {
          newFieldMapping[field] = header;
        }
      });
    });
    setFieldMapping(newFieldMapping);
  };

  const handleMappingChange = (field, value) => {
    setFieldMapping(prev => ({ ...prev, [field]: value }));
  };

  const handleUpload = async () => {
    if (!file) return;

    setIsLoading(true);
    setStep('processing');

    const reader = new FileReader();
    reader.onload = async (e) => {
      const content = e.target.result;
      const lines = content.split('\n');
      const data = lines.slice(1).map(line => {
        const values = line.split(',');
        return {
          firstName: values[headers.indexOf(fieldMapping.firstName)],
          lastName: values[headers.indexOf(fieldMapping.lastName)],
          profileUrl: values[headers.indexOf(fieldMapping.profileUrl)]
        };
      });

      try {
        await setResult(data);
        setStep('complete');
      } catch (error) {
        console.error('Bulk processing error:', error);
        setStep('error');
      }
    };

    reader.readAsText(file);
  };

  return (
    <div className="mt-4">
      {step === 'upload' && (
        <div>
          <input
            type="file"
            onChange={handleFileChange}
            accept=".csv"
            className="mb-2 file:mr-4 file:py-2 file:px-4 file:rounded-full file:border-0 file:text-sm file:font-semibold file:bg-purple-light file:text-white hover:file:bg-purple-dark"
          />
          <p className="text-sm text-gray-600 mt-2">Upload a CSV file with First Name, Last Name, and LinkedIn URL.</p>
        </div>
      )}

      {step === 'mapping' && (
        <div className="mt-4">
          <h3 className="text-lg font-semibold mb-2">Confirm Field Mapping</h3>
          <p className="text-sm text-gray-600 mb-4">We've automatically mapped some fields. Please confirm or adjust as needed.</p>
          <div className="grid grid-cols-1 gap-4">
            {Object.entries(fieldMapping).map(([field, value]) => (
              <div key={field}>
                <label htmlFor={field} className="block text-sm font-medium text-gray-700">
                  {field.charAt(0).toUpperCase() + field.slice(1)}
                </label>
                <select
                  id={field}
                  value={value}
                  onChange={(e) => handleMappingChange(field, e.target.value)}
                  className="mt-1 block w-full pl-3 pr-10 py-2 text-base border-gray-300 focus:outline-none focus:ring-purple-dark focus:border-purple-dark sm:text-sm rounded-md"
                >
                  <option value="">Select a field</option>
                  {headers.map((header, index) => (
                    <option key={index} value={header}>{header}</option>
                  ))}
                </select>
              </div>
            ))}
          </div>
          <button
            onClick={() => setStep('upload')}
            className="mt-4 mr-2 bg-gray-500 text-white p-2 rounded"
          >
            Back
          </button>
          <button
            onClick={handleUpload}
            className="mt-4 bg-purple-light text-white p-2 rounded hover:bg-purple-dark"
            disabled={Object.values(fieldMapping).some(value => !value)}
          >
            Start Processing
          </button>
        </div>
      )}

      {step === 'error' && (
        <div className="mt-4">
          <p className="text-sm text-red-600 font-semibold">An error occurred during bulk processing.</p>
          <button
            onClick={() => setStep('upload')}
            className="mt-2 bg-purple-light text-white p-2 rounded hover:bg-purple-dark"
          >
            Try Again
          </button>
        </div>
      )}

      {step === 'complete' && (
        <div className="mt-4">
          <p className="text-sm text-green-600 font-semibold">Bulk processing complete!</p>
          <button
            onClick={() => setStep('upload')}
            className="mt-2 bg-purple-light text-white p-2 rounded hover:bg-purple-dark"
          >
            Process Another File
          </button>
        </div>
      )}
    </div>
  );
}
----------------------------------------

File:   EnrichmentForm.js

import { useState } from 'react';
import { FaUser, FaBuilding, FaLinkedin } from 'react-icons/fa';

export default function EnrichmentForm({ setResult, setIsLoading, setError }) {
  const [formData, setFormData] = useState({
    firstName: '',
    lastName: '',
    company: '',
    linkedinUrl: '',
  });
  const [searchOptions, setSearchOptions] = useState({
    findIndividualEmail: true,
    getCompanyEmails: false,
    enrichLinkedIn: false,
    findPhoneNumber: false,
  });
  const [localError, setLocalError] = useState('');

  const handleSubmit = async (e) => {
    e.preventDefault();
    setLocalError('');
    setError(''); // Clear any previous global errors

    if (!formData.firstName || !formData.lastName) {
      setLocalError('First name and last name are required');
      return;
    }

    if (!formData.company && (searchOptions.findIndividualEmail || searchOptions.getCompanyEmails)) {
      setLocalError('Company name is required for email search');
      return;
    }

    if (!formData.linkedinUrl && (searchOptions.enrichLinkedIn || searchOptions.findPhoneNumber)) {
      setLocalError('LinkedIn URL is required for LinkedIn enrichment and phone number search');
      return;
    }

    setIsLoading(true);
    try {
      await setResult(formData, searchOptions);
    } catch (error) {
      console.error('Enrichment error:', error);
      setError('An error occurred during enrichment. Please try again.');
    } finally {
      setIsLoading(false);
    }
  };

  const handleChange = (e) => {
    setFormData({ ...formData, [e.target.name]: e.target.value });
  };

  const handleOptionChange = (e) => {
    setSearchOptions({ ...searchOptions, [e.target.name]: e.target.checked });
  };

  return (
    <form onSubmit={handleSubmit} className="space-y-6">
      <div className="bg-purple-light p-6 rounded-lg text-white text-center mb-6">
        <h2 className="text-2xl font-bold">Contact Enrichment</h2>
        <p className="mt-2">Enhance your contact information with our powerful enrichment features</p>
      </div>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
        <div>
          <label htmlFor="firstName" className="block text-sm font-medium text-gray-700">First Name</label>
          <div className="mt-1 relative rounded-md shadow-sm">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FaUser className="text-gray-400" />
            </div>
            <input
              type="text"
              name="firstName"
              id="firstName"
              value={formData.firstName}
              onChange={handleChange}
              className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
              placeholder="John"
            />
          </div>
        </div>
        <div>
          <label htmlFor="lastName" className="block text-sm font-medium text-gray-700">Last Name</label>
          <div className="mt-1 relative rounded-md shadow-sm">
            <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
              <FaUser className="text-gray-400" />
            </div>
            <input
              type="text"
              name="lastName"
              id="lastName"
              value={formData.lastName}
              onChange={handleChange}
              className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
              placeholder="Doe"
            />
          </div>
        </div>
      </div>
      <div>
        <label htmlFor="company" className="block text-sm font-medium text-gray-700">Company Domain</label>
        <div className="mt-1 relative rounded-md shadow-sm">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FaBuilding className="text-gray-400" />
          </div>
          <input
            type="text"
            name="company"
            id="company"
            value={formData.company}
            onChange={handleChange}
            className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
            placeholder="AcmeInc.com"
          />
        </div>
      </div>
      <div>
        <label htmlFor="linkedinUrl" className="block text-sm font-medium text-gray-700">LinkedIn URL (Required for Phone Enrichment)</label>
        <div className="mt-1 relative rounded-md shadow-sm">
          <div className="absolute inset-y-0 left-0 pl-3 flex items-center pointer-events-none">
            <FaLinkedin className="text-gray-400" />
          </div>
          <input
            type="text"
            name="linkedinUrl"
            id="linkedinUrl"
            value={formData.linkedinUrl}
            onChange={handleChange}
            className="focus:ring-indigo-500 focus:border-indigo-500 block w-full pl-10 sm:text-sm border-gray-300 rounded-md"
            placeholder="https://www.linkedin.com/in/username"
          />
        </div>
      </div>
      <div>
        <p className="block text-sm font-medium text-gray-700 mb-2">Enrichment Options</p>
        <div className="space-y-2">
          {Object.entries(searchOptions).map(([key, value]) => (
            <div key={key} className="flex items-center">
              <input
                type="checkbox"
                id={key}
                name={key}
                checked={value}
                onChange={handleOptionChange}
                className="h-4 w-4 text-indigo-600 focus:ring-indigo-500 border-gray-300 rounded"
              />
              <label htmlFor={key} className="ml-2 block text-sm text-gray-900">
                {key.replace(/([A-Z])/g, ' $1').replace(/^./, str => str.toUpperCase())}
              </label>
            </div>
          ))}
        </div>
      </div>
      {localError && (
        <div className="text-red-500 text-sm mt-2">
          {localError}
        </div>
      )}
      <div>
        <button
          type="submit"
          className="w-full flex justify-center py-2 px-4 border border-transparent rounded-md shadow-sm text-sm font-medium text-white bg-purple-light hover:bg-purple-dark focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-indigo-500"
        >
          Enrich Data
        </button>
      </div>
    </form>
  );
}
----------------------------------------

File:   IndividualResultDisplay.js

// File: components/IndividualResultDisplay.js

export default function IndividualResultDisplay({ result }) {
  if (!result || Object.keys(result).length === 0) {
    return <p>No results to display.</p>;
  }

  return (
    <div className="space-y-6">
      {result.email && (
        <div className="bg-white shadow overflow-hidden sm:rounded-lg">
          <div className="px-4 py-5 sm:px-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900">Email Information</h3>
          </div>
          <div className="border-t border-gray-200">
            <dl>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Email</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.email.email}</dd>
              </div>
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Email Status</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.email.email_status}</dd>
              </div>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">First Name</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.email.first_name}</dd>
              </div>
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Last Name</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.email.last_name}</dd>
              </div>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Domain</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.email.domain}</dd>
              </div>
            </dl>
          </div>
        </div>
      )}

      {result.mobile && (
        <div className="bg-white shadow overflow-hidden sm:rounded-lg mt-6">
          <div className="px-4 py-5 sm:px-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900">Mobile Information</h3>
          </div>
          <div className="border-t border-gray-200">
            <dl>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Raw Format</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.mobile.raw_format}</dd>
              </div>
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">International Format</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.mobile.international_format}</dd>
              </div>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">National Format</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.mobile.national_format}</dd>
              </div>
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Country</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.mobile.country_name} ({result.mobile.country_code})</dd>
              </div>
            </dl>
          </div>
        </div>
      )}

      {result.domainSearch && (
        <div className="bg-white shadow overflow-hidden sm:rounded-lg mt-6">
          <div className="px-4 py-5 sm:px-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900">Company Emails</h3>
          </div>
          <div className="border-t border-gray-200">
            <div className="overflow-x-auto">
              <table className="min-w-full divide-y divide-gray-200">
                <thead className="bg-gray-50">
                  <tr>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                    <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                  </tr>
                </thead>
                <tbody className="bg-white divide-y divide-gray-200">
                  {result.domainSearch.email_list.map((email, index) => (
                    <tr key={index}>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{email.email}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {email.first_name || email.last_name ? 
                          `${email.first_name || ''} ${email.last_name || ''}`.trim() : 
                          'N/A'}
                      </td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{email.email_type || 'N/A'}</td>
                      <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">
                        {email.verification?.status || 'N/A'}
                      </td>
                    </tr>
                  ))}
                </tbody>
              </table>
            </div>
            <div className="px-6 py-4 bg-gray-50 border-t border-gray-200">
              <p className="text-sm text-gray-900">
                Total emails found: {result.domainSearch.email_list.length}
              </p>
            </div>
          </div>
        </div>
      )}

      {result.socialEnrichment && (
        <div className="bg-white shadow overflow-hidden sm:rounded-lg mt-6">
          <div className="px-4 py-5 sm:px-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900">LinkedIn Information</h3>
          </div>
          <div className="border-t border-gray-200">
            <dl>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Full Name</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.socialEnrichment.full_name}</dd>
              </div>
              <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Job Title</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.socialEnrichment.job_title}</dd>
              </div>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">LinkedIn URL</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                  <a href={result.socialEnrichment.linkedin} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                    {result.socialEnrichment.linkedin}
                  </a>
                </dd>
              </div>
              {result.socialEnrichment.summary && (
                <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <dt className="text-sm font-medium text-gray-500">Summary</dt>
                  <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.socialEnrichment.summary}</dd>
                </div>
              )}
              {result.socialEnrichment.skills && (
                <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <dt className="text-sm font-medium text-gray-500">Skills</dt>
                  <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.socialEnrichment.skills}</dd>
                </div>
              )}
            </dl>
          </div>
        </div>
      )}

      {result.socialEnrichment && result.socialEnrichment.company && (
        <div className="bg-white shadow overflow-hidden sm:rounded-lg mt-6">
          <div className="px-4 py-5 sm:px-6">
            <h3 className="text-lg leading-6 font-medium text-gray-900">Company Information</h3>
          </div>
          <div className="border-t border-gray-200">
            <dl>
              <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                <dt className="text-sm font-medium text-gray-500">Company Name</dt>
                <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.socialEnrichment.company.name}</dd>
              </div>
              {result.socialEnrichment.company.website && (
                <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <dt className="text-sm font-medium text-gray-500">Website</dt>
                  <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">
                    <a href={result.socialEnrichment.company.website} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                      {result.socialEnrichment.company.website}
                    </a>
                  </dd>
                </div>
              )}
              {result.socialEnrichment.company.industry && (
                <div className="bg-gray-50 px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <dt className="text-sm font-medium text-gray-500">Industry</dt>
                  <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.socialEnrichment.company.industry}</dd>
                </div>
              )}
              {result.socialEnrichment.company.size && (
                <div className="bg-white px-4 py-5 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-6">
                  <dt className="text-sm font-medium text-gray-500">Company Size</dt>
                  <dd className="mt-1 text-sm text-gray-900 sm:mt-0 sm:col-span-2">{result.socialEnrichment.company.size}</dd>
                </div>
              )}
            </dl>
          </div>
        </div>
      )}
    </div>
  );
}
----------------------------------------

File:   Layout.js

import Link from 'next/link';
import { useState } from 'react';
import { motion } from 'framer-motion';
import { Home, FileText, Database, List, BarChart2 } from 'lucide-react';

export default function Layout({ children }) {
  const [isSidebarOpen, setIsSidebarOpen] = useState(false);

  const menuItems = [
    { name: 'Contact Enrichment', href: '/', icon: Home },
    { name: 'Bulk Processing', href: '/bulk', icon: FileText },
    { name: 'Processed Data', href: '/processed', icon: Database },
    { name: 'My Lists', href: '/lists', icon: List },
  ];

  return (
    <div className="flex h-screen bg-gray-100">
      {/* Sidebar */}
      <aside className={`bg-[#ACA2CD] w-64 min-h-screen flex flex-col transition-all duration-300 ${
        isSidebarOpen ? 'translate-x-0' : '-translate-x-full'
      } md:translate-x-0 md:static absolute inset-y-0 left-0 z-20`}>
        <div className="p-4 text-white text-2xl font-bold">Data Forge</div>
        <nav className="flex-1 px-2 py-4 space-y-2">
          {menuItems.map((item) => (
            <Link key={item.name} href={item.href}>
              <div className="flex items-center px-4 py-2 text-white hover:bg-[#415285] rounded-lg cursor-pointer">
                <item.icon className="mr-3 h-5 w-5" />
                <span>{item.name}</span>
              </div>
            </Link>
          ))}
        </nav>
        <Link href="/dashboard">
          <div className="flex items-center px-4 py-2 text-white hover:bg-[#415285] rounded-lg cursor-pointer mt-auto mb-4">
            <BarChart2 className="mr-3 h-5 w-5" />
            <span>Dashboard</span>
          </div>
        </Link>
      </aside>

      {/* Main Content */}
      <div className="flex-1 flex flex-col overflow-hidden">
        <main className="flex-1 overflow-x-hidden overflow-y-auto bg-gray-100">
          <div className="container mx-auto px-6 py-8">
            {children}
          </div>
        </main>
      </div>
    </div>
  );
}
----------------------------------------

File:   ListManager.js

import { useState } from 'react';

export default function ListManager({ lists, onCreateList, onDeleteList, onUpdateList }) {
  const [newListName, setNewListName] = useState('');
  const [editingListId, setEditingListId] = useState(null);

  const handleCreateList = (e) => {
    e.preventDefault();
    if (newListName.trim()) {
      onCreateList(newListName.trim());
      setNewListName('');
    }
  };

  const handleEditList = (list) => {
    setEditingListId(list.id);
    setNewListName(list.name);
  };

  const handleUpdateList = (e) => {
    e.preventDefault();
    if (newListName.trim()) {
      onUpdateList(editingListId, { name: newListName.trim() });
      setEditingListId(null);
      setNewListName('');
    }
  };

  return (
    <div>
      <form onSubmit={editingListId ? handleUpdateList : handleCreateList} className="mb-4">
        <input
          type="text"
          value={newListName}
          onChange={(e) => setNewListName(e.target.value)}
          placeholder="Enter list name"
          className="mr-2 p-2 border rounded"
        />
        <button type="submit" className="bg-blue-500 text-white p-2 rounded">
          {editingListId ? 'Update List' : 'Create New List'}
        </button>
      </form>

      <ul className="space-y-2">
        {lists.map(list => (
          <li key={list.id} className="flex items-center justify-between bg-white p-3 rounded shadow">
            <span>{list.name} ({list.prospects.length} prospects)</span>
            <div>
              <button 
                onClick={() => handleEditList(list)}
                className="text-blue-500 mr-2"
              >
                Edit
              </button>
              <button 
                onClick={() => onDeleteList(list.id)}
                className="text-red-500"
              >
                Delete
              </button>
            </div>
          </li>
        ))}
      </ul>
    </div>
  );
}
----------------------------------------

File:   Logo.js

export default function Logo() {
  return (
    <div className="flex items-center justify-center h-16 bg-white">
      <span className="text-2xl font-bold text-indigo">Contact Boom</span>
    </div>
  );
}
----------------------------------------

File:   ProcessedDataCard.js

// File: components/ProcessedDataCard.js

import React, { useState, useEffect } from 'react';

export default function ProcessedDataCard({ item, onAddToList, onSelect, isSelected }) {
  const [isExpanded, setIsExpanded] = useState(false);
  const [lists, setLists] = useState([]);
  const [selectedList, setSelectedList] = useState('');

  useEffect(() => {
    const savedLists = JSON.parse(localStorage.getItem('prospectLists') || '[]');
    setLists(savedLists);
  }, []);

  const toggleExpand = () => setIsExpanded(!isExpanded);

  const getNestedValue = (obj, path) => {
    return path.split('.').reduce((acc, part) => acc && acc[part], obj);
  };

  const isBulkData = item.dataType === 'bulk';
  const data = isBulkData ? item : item.data;

  const linkedInData = isBulkData ? data.linkedInData : getNestedValue(data, 'socialEnrichment');
  const emailData = isBulkData ? data.emailData : getNestedValue(data, 'email');
  const phoneData = isBulkData ? data.phoneData : getNestedValue(data, 'mobile');
  const companyEmailsData = getNestedValue(data, 'domainSearch');

  const displayName = `${data.firstName || ''} ${data.lastName || ''}`.trim() || 
                     linkedInData?.full_name || 
                     `${emailData?.first_name || ''} ${emailData?.last_name || ''}`.trim() ||
                     'Unnamed Profile';

  const displayCompany = data.company || emailData?.domain || linkedInData?.company?.name || 'Unavailable';

  const getEnrichmentType = () => {
    const types = [];
    if (emailData) types.push('Individual Email');
    if (phoneData) types.push('Phone');
    if (linkedInData) types.push('LinkedIn');
    if (companyEmailsData) types.push('Company Emails');
    return types.join(', ') || 'No enrichment';
  };

  const handleAddToList = () => {
    if (selectedList) {
      onAddToList(selectedList, item);
      setSelectedList('');
    }
  };

  const renderEmailTable = (email) => {
    if (!email) return null;
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">First Name</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Last Name</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Domain</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            <tr>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{email.email}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{email.first_name || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{email.last_name || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{email.email_status || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{email.domain || 'N/A'}</td>
            </tr>
          </tbody>
        </table>
      </div>
    );
  };

  const renderPhoneTable = (phone) => {
    if (!phone) return null;
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Raw Format</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">International Format</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">National Format</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Country</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            <tr>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{phone.raw_format || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{phone.international_format || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{phone.national_format || 'N/A'}</td>
              <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                {phone.country_name ? `${phone.country_name} (${phone.country_code})` : 'N/A'}
              </td>
            </tr>
          </tbody>
        </table>
      </div>
    );
  };

  const renderCompanyEmails = () => {
    if (!companyEmailsData || !companyEmailsData.email_list) return null;
    return (
      <div className="overflow-x-auto">
        <table className="min-w-full divide-y divide-gray-200">
          <thead className="bg-gray-50">
            <tr>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
              <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
            </tr>
          </thead>
          <tbody className="bg-white divide-y divide-gray-200">
            {companyEmailsData.email_list.map((email, index) => (
              <tr key={index}>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{email.email}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">
                  {email.first_name || email.last_name ? `${email.first_name || ''} ${email.last_name || ''}`.trim() : 'N/A'}
                </td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{email.email_type || 'N/A'}</td>
                <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-500">{email.verification?.status || 'N/A'}</td>
              </tr>
            ))}
          </tbody>
        </table>
        <p className="mt-2 text-sm text-gray-600">Total emails found: {companyEmailsData.email_list.length}</p>
      </div>
    );
  };

  const renderLinkedInTable = (linkedin) => {
    if (!linkedin) return null;

    const companyInfo = linkedin.company || {};

    return (
      <div className="space-y-6">
        {/* Basic Information */}
        <div className="overflow-x-auto">
          <table className="min-w-full divide-y divide-gray-200">
            <thead className="bg-gray-50">
              <tr>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/3">Basic Information</th>
                <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-2/3">Details</th>
              </tr>
            </thead>
            <tbody className="bg-white divide-y divide-gray-200">
              <tr>
                <td className="px-6 py-4 text-sm font-medium text-gray-900">Full Name</td>
                <td className="px-6 py-4 text-sm text-gray-500">{linkedin.full_name || 'N/A'}</td>
              </tr>
              <tr>
                <td className="px-6 py-4 text-sm font-medium text-gray-900">Current Position</td>
                <td className="px-6 py-4 text-sm text-gray-500">{linkedin.job_title || 'N/A'}</td>
              </tr>
              <tr>
                <td className="px-6 py-4 text-sm font-medium text-gray-900">LinkedIn Profile</td>
                <td className="px-6 py-4 text-sm text-gray-500">
                  {linkedin.linkedin ? (
                    <a href={linkedin.linkedin} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                      View Profile
                    </a>
                  ) : 'N/A'}
                </td>
              </tr>
            </tbody>
          </table>
        </div>

        {/* Company Information */}
        {companyInfo && Object.keys(companyInfo).length > 0 && (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-1/3">Company Information</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider w-2/3">Details</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Company Name</td>
                  <td className="px-6 py-4 text-sm text-gray-500">{companyInfo.name || 'N/A'}</td>
                </tr>
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Industry</td>
                  <td className="px-6 py-4 text-sm text-gray-500">{companyInfo.industry || 'N/A'}</td>
                </tr>
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Company Size</td>
                  <td className="px-6 py-4 text-sm text-gray-500">{companyInfo.size || 'N/A'}</td>
                </tr>
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Location</td>
                  <td className="px-6 py-4 text-sm text-gray-500">
                    {companyInfo.location ? 
                      `${companyInfo.location.city || ''} ${companyInfo.location.state || ''} ${companyInfo.location.country || ''}`.trim() : 'N/A'}
                  </td>
                </tr>
                <tr>
                  <td className="px-6 py-4 text-sm font-medium text-gray-900">Website</td>
                  <td className="px-6 py-4 text-sm text-gray-500">
                    {companyInfo.website ? (
                      <a href={companyInfo.website} target="_blank" rel="noopener noreferrer" className="text-blue-600 hover:underline">
                        {companyInfo.website}
                      </a>
                    ) : 'N/A'}
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        )}

        {/* Profile Summary */}
        {linkedin.summary && (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Professional Summary</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                <tr>
                  <td className="px-6 py-4 text-sm text-gray-500 whitespace-pre-line">{linkedin.summary}</td>
                </tr>
              </tbody>
            </table>
          </div>
        )}

        {/* Experience */}
        {(linkedin.experience || linkedin.experiences) && (linkedin.experience || linkedin.experiences).length > 0 && (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Professional Experience</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {(linkedin.experience || linkedin.experiences).map((exp, index) => (
                  <tr key={index}>
                    <td className="px-6 py-4 text-sm font-medium text-gray-900 w-1/3">
                      <div className="font-semibold">
                        {typeof exp.company === 'object' ? 
                          exp.company.name : 
                          (exp.company_name || exp.company || 'N/A')}
                      </div>
                      <div className="text-gray-500 text-xs mt-1">
                        {exp.dates || (exp.start_date && 
                          `${exp.start_date}${exp.end_date ? ` - ${exp.end_date}` : ' - Present'}`)}
                      </div>
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500 w-2/3">
                      <div className="font-medium">{exp.title || exp.position || 'N/A'}</div>
                      {exp.location && 
                        <div className="text-gray-400 text-xs mt-1">
                          {typeof exp.location === 'object' ? 
                            `${exp.location.city || ''} ${exp.location.country || ''}`.trim() : 
                            exp.location}
                        </div>
                      }
                      {exp.description && (
                        <div className="mt-2 text-sm whitespace-pre-line">
                          {exp.description}
                        </div>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {/* Education */}
        {linkedin.education && linkedin.education.length > 0 && (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Education</th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Details</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                {linkedin.education.map((edu, index) => (
                  <tr key={index}>
                    <td className="px-6 py-4 text-sm font-medium text-gray-900 w-1/3">
                      <div className="font-semibold">
                        {typeof edu.school === 'object' ? edu.school.name : edu.school || 'N/A'}
                      </div>
                      <div className="text-gray-500 text-xs mt-1">
                        {edu.start_date && `${edu.start_date}${edu.end_date ? ` - ${edu.end_date}` : ' - Present'}`}
                      </div>
                    </td>
                    <td className="px-6 py-4 text-sm text-gray-500 w-2/3">
                      <div className="font-medium">{edu.degree || 'N/A'}</div>
                      {edu.field_of_study && (
                        <div className="text-gray-500">
                          Field of Study: {edu.field_of_study}
                        </div>
                      )}
                      {edu.grade && <div className="text-gray-400 text-sm">Grade: {edu.grade}</div>}
                      {edu.activities && (
                        <div className="mt-2 text-sm text-gray-500">
                          Activities: {edu.activities}
                        </div>
                      )}
                      {edu.description && (
                        <div className="mt-2 text-sm whitespace-pre-line">
                          {edu.description}
                        </div>
                      )}
                    </td>
                  </tr>
                ))}
              </tbody>
            </table>
          </div>
        )}

        {/* Skills */}
        {linkedin.skills && (
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Skills</th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                <tr>
                  <td className="px-6 py-4">
                    <div className="flex flex-wrap gap-2">
                      {linkedin.skills.split(',').map((skill, index) => (
                        <span key={index} className="px-3 py-1 bg-gray-100 rounded-full text-sm text-gray-700">
                          {skill.trim()}
                        </span>
                      ))}
                    </div>
                  </td>
                </tr>
              </tbody>
            </table>
          </div>
        )}
      </div>
    );
  };

      return (
          <div className="bg-white shadow-lg rounded-lg mb-6 overflow-hidden border border-purple-light">
            <div className="px-6 py-4 flex justify-between items-center bg-purple-light">
              <div className="flex items-center">
                <input
                  type="checkbox"
                  checked={isSelected}
                  onChange={() => onSelect(item)}
                  className="mr-4 h-5 w-5 text-blue-600"
                />
                <div>
                  <h3 className="text-xl font-semibold text-white">{displayName}</h3>
                  <p className="text-md text-white">{displayCompany}</p>
                  <p className="text-sm text-white">{getEnrichmentType()}</p>
                </div>
              </div>
              <button onClick={toggleExpand} className="text-2xl text-white focus:outline-none">
                {isExpanded ? '▲' : '▼'}
              </button>
            </div>
            {isExpanded && (
              <div className="p-6 bg-gray-50">
                <p className="text-sm text-gray-600 mb-4">Processed on: {new Date(item.timestamp).toLocaleString()}</p>

                {emailData && (
                  <div className="mb-6">
                    <h4 className="font-semibold text-lg mb-3 text-purple-dark">Email Information</h4>
                    {renderEmailTable(emailData)}
                  </div>
                )}

                {phoneData && (
                  <div className="mb-6">
                    <h4 className="font-semibold text-lg mb-3 text-purple-dark">Phone Information</h4>
                    {renderPhoneTable(phoneData)}
                  </div>
                )}

                {companyEmailsData && (
                  <div className="mb-6">
                    <h4 className="font-semibold text-lg mb-3 text-purple-dark">Company Emails</h4>
                    {renderCompanyEmails()}
                  </div>
                )}

                {linkedInData && (
                  <div className="mb-6">
                    <h4 className="font-semibold text-lg mb-3 text-purple-dark">LinkedIn Information</h4>
                    {renderLinkedInTable(linkedInData)}
                  </div>
                )}

                <div className="mt-4">
                  <select
                    value={selectedList}
                    onChange={(e) => setSelectedList(e.target.value)}
                    className="mr-2 p-2 border rounded focus:outline-none focus:ring-2 focus:ring-purple-dark"
                  >
                    <option value="">Select a list</option>
                    {lists.map(list => (
                      <option key={list.id} value={list.id}>{list.name}</option>
                    ))}
                  </select>
                  <button
                    onClick={handleAddToList}
                    className="bg-blue-500 text-white p-2 rounded hover:bg-blue-600 transition-colors duration-200 disabled:bg-gray-400"
                    disabled={!selectedList}
                  >
                    Add to List
                  </button>
                </div>
              </div>
            )}
          </div>
        );
      }
----------------------------------------

File:   ProgressBar.js

export default function ProgressBar({ progress }) {
  return (
    <div className="w-full bg-gray-200 rounded-full h-2.5 mt-2">
      <div
        className="bg-blue-600 h-2.5 rounded-full"
        style={{ width: `${progress}%` }}
      ></div>
    </div>
  );
}
----------------------------------------

File: next.config.js

module.exports = {
  reactStrictMode: true,
}
----------------------------------------

File: next-env.d.ts

/// <reference types="next" />
/// <reference types="next/image-types/global" />

// NOTE: This file should not be edited
// see https://nextjs.org/docs/pages/building-your-application/configuring/typescript for more information.

----------------------------------------

File: package.json

{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --port 3000 --hostname 0.0.0.0",
    "build": "next build",
    "start": "next start --port 3000 --hostname 0.0.0.0",
    "lint": "next lint"
  },
  "dependencies": {
    "@tailwindcss/forms": "^0.5.9",
    "autoprefixer": "^10.4.20",
    "chart.js": "^4.4.5",
    "date-fns": "^4.1.0",
    "framer-motion": "^11.11.8",
    "lucide-react": "^0.452.0",
    "next": "^14.2.15",
    "postcss": "^8.4.47",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^5.3.0",
    "tailwindcss": "^3.4.13"
  },
  "devDependencies": {
    "@types/node": "^20.11.6",
    "@types/react": "^18.2.48",
    "@types/react-dom": "^18.2.18",
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.1.0",
    "typescript": "^5.3.3"
  }
}

----------------------------------------

Directory: pages

Directory:   api

File:     enrich.js


----------------------------------------

File:     prospeo.js

const API_BASE_URL = 'https://api.prospeo.io';
const API_KEY = process.env.NEXT_PUBLIC_PROSPEO_API_KEY;

export default async function handler(req, res) {
  if (req.method !== 'POST') {
    return res.status(405).json({ error: 'Method not allowed' });
  }

  const { endpoint, data } = req.body;

  try {
    const response = await fetch(`${API_BASE_URL}${endpoint}`, {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'X-KEY': API_KEY,
      },
      body: JSON.stringify(data),
    });

    const responseData = await response.json();

    if (!response.ok) {
      return res.status(response.status).json(responseData);
    }

    return res.status(200).json(responseData);
  } catch (error) {
    console.error('API call error:', error);
    return res.status(500).json({ error: 'Internal server error' });
  }
}
----------------------------------------

File:   _app.js

import '../styles/globals.css'

function MyApp({ Component, pageProps }) {
  return <Component {...pageProps} />
}

export default MyApp
----------------------------------------

File:   bulk.js

// File: pages/bulk.js

import { useState } from 'react';
import { motion } from 'framer-motion';
import Layout from '../components/Layout';
import BulkUpload from '../components/BulkUpload';
import BulkResultDisplay from '../components/BulkResultDisplay';
import { processBulkData, saveBulkProcessedData } from '../utils/bulkApiService';

export default function BulkProcessing() {
  const [results, setResults] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [progress, setProgress] = useState(0);

  const handleBulkProcessing = async (data) => {
    setIsLoading(true);
    setProgress(0);
    try {
      const processedData = await processBulkData(data, (progress) => {
        setProgress(progress);
      });
      setResults(processedData);
      saveBulkProcessedData(processedData);
    } catch (error) {
      console.error('Bulk processing error:', error);
      setResults({ error: 'An error occurred during bulk processing.' });
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="max-w-4xl mx-auto"
      >
        <div className="bg-white shadow-lg rounded-lg p-6 mb-6">
          <h2 className="text-2xl font-semibold mb-4 text-purple-dark">Bulk Processing</h2>
          <BulkUpload setResult={handleBulkProcessing} setIsLoading={setIsLoading} />
        </div>

        {isLoading && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-white shadow-lg rounded-lg p-6 mb-6"
          >
            <div className="flex flex-col items-center">
              <h3 className="text-lg font-semibold text-purple-dark mb-4">Processing your bulk data...</h3>
              <div className="w-full bg-gray-200 rounded-full h-4 dark:bg-gray-700 mb-2">
                <div 
                  className="bg-purple-light h-4 rounded-full transition-all duration-300 ease-in-out"
                  style={{ width: `${progress}%` }}
                ></div>
              </div>
              <p className="text-sm text-gray-600">Processing... {progress.toFixed(2)}% complete</p>
            </div>
          </motion.div>
        )}

        {results && (
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
          >
            <BulkResultDisplay results={results} />
          </motion.div>
        )}
      </motion.div>
    </Layout>
  );
}
----------------------------------------

File:   dashboard.js

// File: pages/dashboard.js

import { useState, useEffect } from 'react';
import Layout from '../components/Layout';
import { Bar } from 'react-chartjs-2';
import { Chart as ChartJS, CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend } from 'chart.js';
import { format, subDays, parseISO } from 'date-fns';
import { getUsageData, getBulkEnrichmentData } from '../utils/creditSystem';

ChartJS.register(CategoryScale, LinearScale, BarElement, Title, Tooltip, Legend);

export default function Dashboard() {
  const [usageData, setUsageData] = useState(null);
  const [bulkData, setBulkData] = useState(null);
  const [startDate, setStartDate] = useState(subDays(new Date(), 30));
  const [endDate, setEndDate] = useState(new Date());
  const [mounted, setMounted] = useState(false);

  useEffect(() => {
    setMounted(true);
    const fetchData = () => {
      try {
        const usage = getUsageData(format(startDate, 'yyyy-MM-dd'), format(endDate, 'yyyy-MM-dd'));
        const bulk = getBulkEnrichmentData(format(startDate, 'yyyy-MM-dd'), format(endDate, 'yyyy-MM-dd'));
        /
        setUsageData(usage);
        setBulkData(bulk);
      } catch (error) {
        console.error('Error fetching dashboard data:', error);
      }
    };

    fetchData();
  }, [startDate, endDate]);

  const chartData = {
    labels: usageData?.dailyCredits.map(day => format(parseISO(day.date), 'MMM dd')) || [],
    datasets: [
      {
        label: 'Credits Used',
        data: usageData?.dailyCredits.map(day => day.credits) || [],
        backgroundColor: 'rgba(75, 192, 192, 0.6)',
      },
    ],
  };

  const chartOptions = {
    responsive: true,
    plugins: {
      legend: {
        position: 'top',
      },
      title: {
        display: true,
        text: 'Daily Credit Usage',
      },
    },
    scales: {
      y: {
        beginAtZero: true,
        ticks: {
          precision: 0
        }
      }
    }
  };

  // Calculate credit totals
  const linkedinCount = usageData?.totalUsage.linkedinProfiles || 0;
  const validEmailsCount = usageData?.totalUsage.validEmails || 0;
  const phoneCount = usageData?.totalUsage.phoneNumbers || 0;

  // Calculate credits per service
  const linkedinCredits = linkedinCount * 1;      // 1 credit per LinkedIn profile
  const emailCredits = validEmailsCount * 2;      // 2 credits per valid email
  const phoneCredits = phoneCount * 10;           // 10 credits per phone number

  // Calculate total credits
  const totalCredits = linkedinCredits + emailCredits + phoneCredits;

  // Format the date consistently for both server and client
  const formattedDate = mounted ? format(new Date(), 'yyyy-MM-dd HH:mm:ss') : '';

  return (
    <Layout>
      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold text-gray-900">Dashboard</h1>
          {mounted && (
            <p className="text-sm text-gray-500">
              Last updated: {formattedDate}
            </p>
          )}
        </div>

        {/* Credit Usage Summary */}
        <div className="bg-white shadow rounded-lg p-6 mb-8">
          <div className="flex justify-between items-center mb-4">
            <h2 className="text-xl font-semibold">Credit Usage Summary</h2>
            <p className="text-2xl font-bold text-purple-600">
              {totalCredits} Total Credits Used
            </p>
          </div>

          <div className="grid grid-cols-1 md:grid-cols-3 gap-8">
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-500">LinkedIn Profiles</p>
              <p className="text-lg font-semibold">{linkedinCount} profiles</p>
              <div className="flex justify-between text-sm mt-2">
                <span className="text-gray-500">Rate: 1 credit each</span>
                <span className="font-medium">{linkedinCredits} credits</span>
              </div>
            </div>

            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-500">Verified Emails</p>
              <p className="text-lg font-semibold">{validEmailsCount} emails</p>
              <div className="flex justify-between text-sm mt-2">
                <span className="text-gray-500">Rate: 2 credits each</span>
                <span className="font-medium">{emailCredits} credits</span>
              </div>
            </div>

            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-500">Phone Numbers</p>
              <p className="text-lg font-semibold">{phoneCount} numbers</p>
              <div className="flex justify-between text-sm mt-2">
                <span className="text-gray-500">Rate: 10 credits each</span>
                <span className="font-medium">{phoneCredits} credits</span>
              </div>
            </div>
          </div>
        </div>

        {/* Bulk Processing Statistics */}
        <div className="bg-white shadow rounded-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Bulk Processing Statistics</h2>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-500">Files Processed</p>
              <p className="text-lg font-semibold">{bulkData?.files || 0}</p>
            </div>
            <div className="bg-gray-50 p-4 rounded-lg">
              <p className="text-sm text-gray-500">Total Entries</p>
              <p className="text-lg font-semibold">{bulkData?.entries || 0}</p>
            </div>
          </div>
        </div>

        {/* Daily Usage Chart */}
        <div className="bg-white shadow rounded-lg p-6 mb-8">
          <h2 className="text-xl font-semibold mb-4">Daily Credit Usage</h2>
          <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label htmlFor="startDate" className="block text-sm font-medium text-gray-700">
                Start Date
              </label>
              <input
                type="date"
                id="startDate"
                value={format(startDate, 'yyyy-MM-dd')}
                onChange={(e) => setStartDate(new Date(e.target.value))}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </div>
            <div>
              <label htmlFor="endDate" className="block text-sm font-medium text-gray-700">
                End Date
              </label>
              <input
                type="date"
                id="endDate"
                value={format(endDate, 'yyyy-MM-dd')}
                onChange={(e) => setEndDate(new Date(e.target.value))}
                className="mt-1 block w-full rounded-md border-gray-300 shadow-sm focus:border-indigo-300 focus:ring focus:ring-indigo-200 focus:ring-opacity-50"
              />
            </div>
          </div>
          <div className="h-96">
            {mounted && <Bar options={chartOptions} data={chartData} />}
          </div>
        </div>

        {/* Credit Cost Reference */}
        <div className="bg-white shadow rounded-lg p-6">
          <h2 className="text-xl font-semibold mb-4">Credit Cost Reference</h2>
          <div className="overflow-x-auto">
            <table className="min-w-full divide-y divide-gray-200">
              <thead className="bg-gray-50">
                <tr>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Action
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Credit Cost
                  </th>
                  <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                    Details
                  </th>
                </tr>
              </thead>
              <tbody className="bg-white divide-y divide-gray-200">
                <tr>
                  <td className="px-6 py-4 whitespace-nowrap">LinkedIn Profile Enrichment</td>
                  <td className="px-6 py-4 whitespace-nowrap">1 credit</td>
                  <td className="px-6 py-4">Per profile enriched</td>
                </tr>
                <tr>
                  <td className="px-6 py-4 whitespace-nowrap">Verified Email</td>
                  <td className="px-6 py-4 whitespace-nowrap">2 credits</td>
                  <td className="px-6 py-4">Per verified email (individual or company)</td>
                </tr>
                <tr>
                  <td className="px-6 py-4 whitespace-nowrap">Phone Number</td>
                  <td className="px-6 py-4 whitespace-nowrap">10 credits</td>
                  <td className="px-6 py-4">Per phone number found</td>
                </tr>
              </tbody>
            </table>
          </div>
        </div>
      </div>
    </Layout>
  );
}
----------------------------------------

File:   index.js

import { useState } from 'react';
import { motion } from 'framer-motion';
import Layout from '../components/Layout';
import EnrichmentForm from '../components/EnrichmentForm';
import IndividualResultDisplay from '../components/IndividualResultDisplay';
import { enrichIndividualData, saveIndividualProcessedData } from '../utils/individualApiService';

export default function Home() {
  const [result, setResult] = useState(null);
  const [isLoading, setIsLoading] = useState(false);
  const [error, setError] = useState(null);

  const handleEnrichment = async (formData, searchOptions) => {
    setIsLoading(true);
    setError(null);
    try {
      const enrichedData = await enrichIndividualData(formData, searchOptions);
      if (Object.keys(enrichedData).length === 0) {
        setError('No data could be enriched. Please check your inputs and try again.');
      } else {
        setResult(enrichedData);
        saveIndividualProcessedData(enrichedData, formData);
      }
    } catch (error) {
      console.error('Enrichment error:', error);
      setError(`An error occurred during enrichment: ${error.message}`);
    } finally {
      setIsLoading(false);
    }
  };

  return (
    <Layout>
      <motion.div
        initial={{ opacity: 0 }}
        animate={{ opacity: 1 }}
        transition={{ duration: 0.5 }}
        className="max-w-4xl mx-auto"
      >
        <div className="bg-white shadow-lg rounded-lg p-6 mb-6">
          <EnrichmentForm setResult={handleEnrichment} setIsLoading={setIsLoading} setError={setError} />
        </div>
        {isLoading && (
          <motion.div 
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="text-center py-4"
          >
            <div className="inline-block animate-spin rounded-full h-8 w-8 border-t-2 border-b-2 border-[#ACA2CD]"></div>
            <p className="mt-2 text-gray-600">Processing... This may take a few moments.</p>
          </motion.div>
        )}
        {error && (
          <motion.div
            initial={{ opacity: 0 }}
            animate={{ opacity: 1 }}
            className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded relative mt-4"
            role="alert"
          >
            <strong className="font-bold">Error: </strong>
            <span className="block sm:inline">{error}</span>
          </motion.div>
        )}
        {result && !isLoading && (
          <motion.div 
            initial={{ opacity: 0, y: 20 }}
            animate={{ opacity: 1, y: 0 }}
            transition={{ delay: 0.2 }}
            className="mt-8"
          >
            <h2 className="text-2xl font-semibold mb-4 text-gray-800">Enrichment Results</h2>
            <IndividualResultDisplay result={result} />
          </motion.div>
        )}
      </motion.div>
    </Layout>
  );
}
----------------------------------------

File:   lists.js

import { useState, useEffect } from 'react';
import Layout from '../components/Layout';

export default function MyLists() {
  const [lists, setLists] = useState([]);
  const [expandedLists, setExpandedLists] = useState({});
  const [newListName, setNewListName] = useState('');
  const [editingListId, setEditingListId] = useState(null);

  useEffect(() => {
    // Load lists from localStorage
    const savedLists = JSON.parse(localStorage.getItem('prospectLists') || '[]');
    setLists(savedLists);
  }, []);

  const saveListsToStorage = (updatedLists) => {
    localStorage.setItem('prospectLists', JSON.stringify(updatedLists));
    setLists(updatedLists);
  };

  const createNewList = (e) => {
    e.preventDefault();
    if (newListName.trim()) {
      const newList = { id: Date.now().toString(), name: newListName.trim(), prospects: [] };
      const updatedLists = [...lists, newList];
      saveListsToStorage(updatedLists);
      setNewListName('');
    }
  };

  const deleteList = (listId) => {
    const updatedLists = lists.filter(list => list.id !== listId);
    saveListsToStorage(updatedLists);
  };

  const updateList = (e) => {
    e.preventDefault();
    if (newListName.trim()) {
      const updatedLists = lists.map(list => 
        list.id === editingListId ? { ...list, name: newListName.trim() } : list
      );
      saveListsToStorage(updatedLists);
      setEditingListId(null);
      setNewListName('');
    }
  };

  const toggleListExpansion = (listId) => {
    setExpandedLists(prev => ({ ...prev, [listId]: !prev[listId] }));
  };

  const removeProspectFromList = (listId, prospectIndex) => {
    const updatedLists = lists.map(list => {
      if (list.id === listId) {
        const updatedProspects = list.prospects.filter((_, index) => index !== prospectIndex);
        return { ...list, prospects: updatedProspects };
      }
      return list;
    });
    saveListsToStorage(updatedLists);
  };

  const handleEditList = (list) => {
    setEditingListId(list.id);
    setNewListName(list.name);
  };

  const getProspectData = (prospect) => {
    const data = prospect.data || prospect;
    const linkedInData = data.linkedInData || data.socialEnrichment || {};
    const emailData = data.emailData || data.email || {};
    const phoneData = data.phoneData || data.mobile || {};

    return {
      name: linkedInData.full_name || `${emailData.first_name || ''} ${emailData.last_name || ''}`.trim() || 'N/A',
      company: linkedInData.company?.name || emailData.domain || 'N/A',
      email: emailData.email || 'N/A',
      emailStatus: emailData.email_status || 'N/A',
      phoneNumber: phoneData.international_format || phoneData.phone_number || 'N/A'
    };
  };

  const downloadCSV = (list) => {
    const headers = ['Name', 'Company', 'Email', 'Email Status', 'Phone Number'];
    const csvData = list.prospects.map(prospect => {
      const { name, company, email, emailStatus, phoneNumber } = getProspectData(prospect);
      return [name, company, email, emailStatus, phoneNumber];
    });

    const csvContent = [
      headers.join(','),
      ...csvData.map(row => row.join(','))
    ].join('\n');

    const blob = new Blob([csvContent], { type: 'text/csv;charset=utf-8;' });
    const link = document.createElement('a');
    if (link.download !== undefined) {
      const url = URL.createObjectURL(blob);
      link.setAttribute('href', url);
      link.setAttribute('download', `${list.name}.csv`);
      link.style.visibility = 'hidden';
      document.body.appendChild(link);
      link.click();
      document.body.removeChild(link);
    }
  };

  return (
    <Layout>
      <div className="max-w-6xl mx-auto px-4 py-8">
        <h2 className="text-3xl font-semibold mb-6 text-purple-dark">My Lists</h2>

        <form onSubmit={editingListId ? updateList : createNewList} className="mb-8">
          <div className="flex items-center">
            <input
              type="text"
              value={newListName}
              onChange={(e) => setNewListName(e.target.value)}
              placeholder={editingListId ? "Edit list name" : "Enter new list name"}
              className="flex-grow mr-2 p-2 border border-purple-light rounded-md focus:outline-none focus:ring-2 focus:ring-purple-dark"
            />
            <button
              type="submit"
              className="bg-purple-dark text-white px-4 py-2 rounded-md hover:bg-purple-900 transition duration-300"
            >
              {editingListId ? 'Update List' : 'Create List'}
            </button>
          </div>
        </form>

        <div className="space-y-4">
          {lists.map(list => (
            <div key={list.id} className="bg-white shadow-md rounded-lg overflow-hidden">
              <div className="bg-purple-light p-4 flex justify-between items-center">
                <h3 className="text-xl font-semibold text-white">{list.name}</h3>
                <div>
                  <button
                    onClick={() => handleEditList(list)}
                    className="text-white mr-2 hover:text-purple-200"
                  >
                    Edit
                  </button>
                  <button
                    onClick={() => deleteList(list.id)}
                    className="text-white mr-2 hover:text-purple-200"
                  >
                    Delete
                  </button>
                  <button
                    onClick={() => downloadCSV(list)}
                    className="text-white mr-2 hover:text-purple-200"
                  >
                    Download CSV
                  </button>
                  <button
                    onClick={() => toggleListExpansion(list.id)}
                    className="text-white hover:text-purple-200"
                  >
                    {expandedLists[list.id] ? '▲' : '▼'}
                  </button>
                </div>
              </div>
              {expandedLists[list.id] && (
                <div className="p-4 overflow-x-auto">
                  {list.prospects.length === 0 ? (
                    <p className="text-gray-500">No prospects in this list.</p>
                  ) : (
                    <table className="min-w-full divide-y divide-gray-200">
                      <thead className="bg-gray-50">
                        <tr>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Name</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Company</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email Status</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Phone Number</th>
                          <th scope="col" className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Action</th>
                        </tr>
                      </thead>
                      <tbody className="bg-white divide-y divide-gray-200">
                        {list.prospects.map((prospect, index) => {
                          const { name, company, email, emailStatus, phoneNumber } = getProspectData(prospect);
                          return (
                            <tr key={index}>
                              <td className="px-6 py-4 whitespace-nowrap">{name}</td>
                              <td className="px-6 py-4 whitespace-nowrap">{company}</td>
                              <td className="px-6 py-4 whitespace-nowrap">{email}</td>
                              <td className="px-6 py-4 whitespace-nowrap">{emailStatus}</td>
                              <td className="px-6 py-4 whitespace-nowrap">{phoneNumber}</td>
                              <td className="px-6 py-4 whitespace-nowrap">
                                <button
                                  onClick={() => removeProspectFromList(list.id, index)}
                                  className="text-red-600 hover:text-red-900"
                                >
                                  Remove
                                </button>
                              </td>
                            </tr>
                          );
                        })}
                      </tbody>
                    </table>
                  )}
                </div>
              )}
            </div>
          ))}
        </div>
      </div>
    </Layout>
  );
}
----------------------------------------

File:   processed.js

import { useState, useEffect } from 'react';
import Layout from '../components/Layout';
import ProcessedDataCard from '../components/ProcessedDataCard';
import { getIndividualProcessedData } from '../utils/individualApiService';
import { getBulkProcessedData } from '../utils/bulkApiService';

export default function ProcessedData() {
  const [processedData, setProcessedData] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [currentPage, setCurrentPage] = useState(1);
  const [itemsPerPage, setItemsPerPage] = useState(10);
  const [startDate, setStartDate] = useState('');
  const [endDate, setEndDate] = useState('');
  const [selectedItems, setSelectedItems] = useState([]);
  const [lists, setLists] = useState([]);
  const [selectedList, setSelectedList] = useState('');
  const [isCreatingNewList, setIsCreatingNewList] = useState(false);
  const [newListName, setNewListName] = useState('');

  useEffect(() => {
    const fetchData = async () => {
      const individualData = await getIndividualProcessedData();
      const bulkData = await getBulkProcessedData();

      console.log('Individual data:', individualData);
      console.log('Bulk data:', bulkData);

      const combinedData = [
        ...individualData.map(item => ({ ...item, dataType: 'individual' })),
        ...bulkData.flatMap(bulkItem => 
          Array.isArray(bulkItem.data) ? bulkItem.data.map(item => ({
            ...item,
            timestamp: bulkItem.timestamp,
            dataType: 'bulk'
          })) : [{
            ...bulkItem.data,
            timestamp: bulkItem.timestamp,
            dataType: 'bulk'
          }]
        )
      ].filter(item => item && Object.keys(item).length > 0)
       .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp));

      console.log('Combined data:', combinedData);
      setProcessedData(combinedData);

      const savedLists = JSON.parse(localStorage.getItem('prospectLists') || '[]');
      console.log('Saved lists:', savedLists);
      setLists(savedLists);
    };

    fetchData();
  }, []);

  const getNestedValue = (obj, path) => {
    return path.split('.').reduce((acc, part) => acc && acc[part], obj);
  };

  const filteredData = processedData.filter(item => {
    const searchString = searchTerm.toLowerCase();
    const isBulkData = item.dataType === 'bulk';

    let name, company, email;

    if (isBulkData) {
      name = getNestedValue(item, 'linkedInData.full_name') || 
             `${item.firstName || ''} ${item.lastName || ''}`.trim() || '';
      company = getNestedValue(item, 'linkedInData.company.name') || '';
      email = getNestedValue(item, 'emailData.email') || '';
    } else {
      name = getNestedValue(item, 'data.socialEnrichment.full_name') ||
             `${getNestedValue(item, 'data.email.first_name') || ''} ${getNestedValue(item, 'data.email.last_name') || ''}`.trim() || '';
      company = getNestedValue(item, 'data.socialEnrichment.company.name') ||
                getNestedValue(item, 'data.email.domain') || '';
      email = getNestedValue(item, 'data.email.email') || '';
    }

    const matchesSearch = name.toLowerCase().includes(searchString) || 
                          company.toLowerCase().includes(searchString) || 
                          email.toLowerCase().includes(searchString);

    const itemDate = new Date(item.timestamp);
    const matchesDateRange = (!startDate || itemDate >= new Date(startDate)) && 
                             (!endDate || itemDate <= new Date(endDate));

    return matchesSearch && matchesDateRange;
  });

  const pageCount = Math.ceil(filteredData.length / itemsPerPage);
  const indexOfLastItem = currentPage * itemsPerPage;
  const indexOfFirstItem = indexOfLastItem - itemsPerPage;
  const currentItems = filteredData.slice(indexOfFirstItem, indexOfLastItem);

  const paginate = (pageNumber) => setCurrentPage(pageNumber);

  const handleSelect = (item) => {
    console.log('Selecting item:', item);
    setSelectedItems(prevSelected => {
      const isAlreadySelected = prevSelected.some(selectedItem => 
        selectedItem.timestamp === item.timestamp && 
        getNestedValue(selectedItem, 'data.email.email') === getNestedValue(item, 'data.email.email')
      );

      if (isAlreadySelected) {
        return prevSelected.filter(selectedItem => 
          !(selectedItem.timestamp === item.timestamp && 
            getNestedValue(selectedItem, 'data.email.email') === getNestedValue(item, 'data.email.email'))
        );
      } else {
        // If the item is from bulk data, add all items with the same timestamp
        if (item.dataType === 'bulk') {
          const bulkItems = processedData.filter(dataItem => 
            dataItem.dataType === 'bulk' && dataItem.timestamp === item.timestamp
          );
          return [...prevSelected, ...bulkItems];
        } else {
          return [...prevSelected, item];
        }
      }
    });
  };

  const handleSelectAll = () => {
    console.log('Selecting all items');
    if (selectedItems.length === currentItems.length) {
      setSelectedItems([]);
    } else {
      setSelectedItems(currentItems);
    }
  };

  const handleAddToList = (listId, item) => {
    console.log('Adding item to list:', listId, item);
    const updatedLists = lists.map(list => {
      if (list.id === listId) {
        const itemsToAdd = item.dataType === 'bulk' 
          ? processedData.filter(dataItem => dataItem.dataType === 'bulk' && dataItem.timestamp === item.timestamp)
          : [item];

        const newProspects = itemsToAdd.filter(newItem => 
          !list.prospects.some(prospect => 
            prospect.timestamp === newItem.timestamp && 
            getNestedValue(prospect, 'data.email.email') === getNestedValue(newItem, 'data.email.email')
          )
        );

        return { ...list, prospects: [...list.prospects, ...newProspects] };
      }
      return list;
    });
    setLists(updatedLists);
    localStorage.setItem('prospectLists', JSON.stringify(updatedLists));
  };

  const handleAddSelectedToList = () => {
    console.log('Adding selected items to list:', selectedList, selectedItems);
    if (selectedList === 'new') {
      handleCreateNewList();
    } else if (selectedList) {
      const updatedLists = lists.map(list => {
        if (list.id === selectedList) {
          const newProspects = selectedItems.filter(item => 
            !list.prospects.some(prospect => 
              prospect.timestamp === item.timestamp && 
              getNestedValue(prospect, 'data.email.email') === getNestedValue(item, 'data.email.email')
            )
          );
          return { ...list, prospects: [...list.prospects, ...newProspects] };
        }
        return list;
      });
      setLists(updatedLists);
      localStorage.setItem('prospectLists', JSON.stringify(updatedLists));
      setSelectedItems([]);
      setSelectedList('');
    }
  };

  const handleCreateNewList = () => {
    console.log('Creating new list:', newListName, selectedItems);
    if (newListName.trim()) {
      const newList = {
        id: Date.now().toString(),
        name: newListName.trim(),
        prospects: selectedItems
      };
      const updatedLists = [...lists, newList];
      setLists(updatedLists);
      localStorage.setItem('prospectLists', JSON.stringify(updatedLists));
      setNewListName('');
      setSelectedItems([]);
      setIsCreatingNewList(false);
      setSelectedList('');
    }
  };

  return (
    <Layout>
      <div className="max-w-6xl mx-auto px-4 py-8">
        <h2 className="text-3xl font-bold mb-6 text-purple-dark">Processed Data</h2>

        <div className="mb-6 grid grid-cols-1 md:grid-cols-2 gap-4">
          <input
            type="text"
            placeholder="Search by name, company, or email"
            value={searchTerm}
            onChange={(e) => setSearchTerm(e.target.value)}
            className="w-full px-4 py-2 border border-purple-light rounded-md focus:outline-none focus:ring-2 focus:ring-purple-dark text-lg"
          />
          <div className="flex space-x-2">
            <input
              type="date"
              value={startDate}
              onChange={(e) => setStartDate(e.target.value)}
              className="w-1/2 px-4 py-2 border border-purple-light rounded-md focus:outline-none focus:ring-2 focus:ring-purple-dark"
            />
            <input
              type="date"
              value={endDate}
              onChange={(e) => setEndDate(e.target.value)}
              className="w-1/2 px-4 py-2 border border-purple-light rounded-md focus:outline-none focus:ring-2 focus:ring-purple-dark"
            />
          </div>
        </div>

        <div className="mb-6 flex justify-between items-center">
          <div>
            <label htmlFor="itemsPerPage" className="mr-2 text-purple-dark">Items per page:</label>
            <select
              id="itemsPerPage"
              value={itemsPerPage}
              onChange={(e) => setItemsPerPage(Number(e.target.value))}
              className="px-2 py-1 border border-purple-light rounded-md focus:outline-none focus:ring-2 focus:ring-purple-dark"
            >
              {[10, 20, 50, 100].map(num => (
                <option key={num} value={num}>{num}</option>
              ))}
            </select>
          </div>
          <div>
            Showing {indexOfFirstItem + 1}-{Math.min(indexOfLastItem, filteredData.length)} of {filteredData.length}
          </div>
        </div>

        {/* Bulk actions */}
        <div className="mb-6 p-4 bg-purple-light rounded-lg">
          <h3 className="text-lg font-semibold mb-2 text-white">Bulk Actions</h3>
          <div className="flex items-center space-x-4">
            <button
              onClick={handleSelectAll}
              className="bg-purple-dark text-white px-4 py-2 rounded hover:bg-purple-900"
            >
              {selectedItems.length === currentItems.length ? 'Deselect All' : 'Select All'}
            </button>
            <select
              value={selectedList}
              onChange={(e) => {
                if (e.target.value === 'new') {
                  setIsCreatingNewList(true);
                  setSelectedList('');
                } else {
                  setIsCreatingNewList(false);
                  setSelectedList(e.target.value);
                }
              }}
              className="px-4 py-2 border border-purple-dark rounded-md focus:outline-none focus:ring-2 focus:ring-purple-dark"
            >
              <option value="">Select a list</option>
              {lists.map(list => (
                <option key={list.id} value={list.id}>{list.name}</option>
              ))}
              <option value="new">Create new list</option>
            </select>
            {isCreatingNewList && (
              <input
                type="text"
                placeholder="New list name"
                value={newListName}
                onChange={(e) => setNewListName(e.target.value)}
                className="px-4 py-2 border border-purple-dark rounded-md focus:outline-none focus:ring-2 focus:ring-purple-dark"
              />
            )}
            <button
              onClick={() => {
                if (isCreatingNewList) {
                  handleCreateNewList();
                } else {
                  handleAddSelectedToList();
                }
              }}
              disabled={(!selectedList && !isCreatingNewList) || selectedItems.length === 0 || (isCreatingNewList && !newListName.trim())}
              className="bg-purple-dark text-white px-4 py-2 rounded hover:bg-purple-900 disabled:bg-gray-400"
            >
              {isCreatingNewList ? 'Create New List' : 'Add to List'}
            </button>
          </div>
        </div>

        {currentItems.length === 0 ? (
          <p className="text-center text-gray-600 text-lg">No processed data available.</p>
        ) : (
          currentItems.map((item, index) => (
            <ProcessedDataCard
              key={`${item.timestamp}-${getNestedValue(item, 'data.email.email') || index}`}
              item={item}
              onAddToList={handleAddToList}
              onSelect={handleSelect}
              isSelected={selectedItems.some(selectedItem => 
                selectedItem.timestamp === item.timestamp && 
                getNestedValue(selectedItem, 'data.email.email') === getNestedValue(item, 'data.email.email')
              )}
            />
          ))
        )}

        <div className="mt-6 flex justify-center">
          {Array.from({ length: pageCount }, (_, i) => (
            <button
              key={i}
              onClick={() => paginate(i + 1)}
              className={`mx-1 px-3 py-1 rounded ${
                currentPage === i + 1 ? 'bg-purple-dark text-white' : 'bg-purple-light text-purple-dark'
              }`}
            >
              {i + 1}
            </button>
          ))}
        </div>
      </div>
    </Layout>
  );
}
----------------------------------------

File: postcss.config.js

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
----------------------------------------

Directory: public

File: README.md

Welcome to the NextJS base template bootstrapped using the `create-next-app`. This template supports TypeScript, but you can use normal JavaScript as well.

## Getting Started

Hit the run button to start the development server.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on `/api/hello`. This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

## Productionizing your Next App

To make your next App run smoothly in production make sure to deploy your project with [Repl Deployments](https://docs.replit.com/hosting/deployments/about-deployments)!

You can also produce a production build by running `npm run build` and [changing the run command](https://docs.replit.com/programming-ide/configuring-repl#run) to `npm run start`.

----------------------------------------

Directory: styles

File:   globals.css

@tailwind base;
@tailwind components;
@tailwind utilities;

/* Add any global styles here */
----------------------------------------

File:   Home.module.css

.container {
  padding: 0 2rem;
}

.main {
  min-height: 100vh;
  padding: 4rem 0;
  flex: 1;
  display: flex;
  flex-direction: column;
  justify-content: center;
  align-items: center;
}

.footer {
  display: flex;
  flex: 1;
  padding: 2rem 0;
  border-top: 1px solid #eaeaea;
  justify-content: center;
  align-items: center;
}

.footer a {
  display: flex;
  justify-content: center;
  align-items: center;
  flex-grow: 1;
}

.title a {
  color: #0070f3;
  text-decoration: none;
}

.title a:hover,
.title a:focus,
.title a:active {
  text-decoration: underline;
}

.title {
  margin: 0;
  line-height: 1.15;
  font-size: 4rem;
}

.title,
.description {
  text-align: center;
}

.description {
  margin: 4rem 0;
  line-height: 1.5;
  font-size: 1.5rem;
}

.code {
  background: #fafafa;
  border-radius: 5px;
  padding: 0.75rem;
  font-size: 1.1rem;
  font-family: Menlo, Monaco, Lucida Console, Liberation Mono, DejaVu Sans Mono,
    Bitstream Vera Sans Mono, Courier New, monospace;
}

.grid {
  display: flex;
  align-items: center;
  justify-content: center;
  flex-wrap: wrap;
  max-width: 800px;
}

.card {
  margin: 1rem;
  padding: 1.5rem;
  text-align: left;
  color: inherit;
  text-decoration: none;
  border: 1px solid #eaeaea;
  border-radius: 10px;
  transition: color 0.15s ease, border-color 0.15s ease;
  max-width: 300px;
}

.card:hover,
.card:focus,
.card:active {
  color: #0070f3;
  border-color: #0070f3;
}

.card h2 {
  margin: 0 0 1rem 0;
  font-size: 1.5rem;
}

.card p {
  margin: 0;
  font-size: 1.25rem;
  line-height: 1.5;
}

.logo {
  height: 1em;
  margin-left: 0.2rem;
}

@media (max-width: 600px) {
  .grid {
    width: 100%;
    flex-direction: column;
  }
}

----------------------------------------

File: tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'purple-light': '#ACA2CD',
        'purple-dark': '#415285',
        'indigo': {
          DEFAULT: '#4F46E5',
          '50': '#EBEAFE',
          '100': '#D7D5FD',
          '200': '#B0ABFB',
          '300': '#8881F8',
          '400': '#6158F6',
          '500': '#4F46E5',
          '600': '#2415DD',
          '700': '#1C10AB',
          '800': '#140B7A',
          '900': '#0C0749'
        },
      },
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'Noto Sans', 'sans-serif', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'],
      },
      boxShadow: {
        'sm': '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
        DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
        'md': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        'lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
        'xl': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
        '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
        'inner': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
        'none': 'none',
      },
    },
  },
  plugins: [],
}
----------------------------------------

File: tsconfig.json

{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

----------------------------------------

Directory: utils

File:   bulkApiService.js

import { trackUsage, trackBulkEnrichment } from './creditSystem';

const API_BASE_URL = 'https://api.prospeo.io';
const API_KEY = process.env.NEXT_PUBLIC_PROSPEO_API_KEY;
const MAX_RETRIES = 2;
const RETRY_DELAY = 1000; // 1 second

// In-memory cache
let cache = {};

// Function to generate a unique key for caching
function getCacheKey(endpoint, data) {
  return `${endpoint}:${JSON.stringify(data)}`;
}

async function callApi(endpoint, data, retries = 0) {
  const cacheKey = getCacheKey(endpoint, data);

  // Check cache first
  if (cache[cacheKey]) {
    console.log('Returning cached data for:', cacheKey);
    return cache[cacheKey];
  }

  try {
    const response = await fetch('/api/prospeo', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ endpoint, data }),
    });

    if (!response.ok) {
      const responseData = await response.json();
      throw new Error(`API Error: ${responseData.message}`);
    }

    const result = await response.json();

    // Cache the result
    cache[cacheKey] = result;

    return result;
  } catch (error) {
    if (retries < MAX_RETRIES) {
      console.log(`Retrying API call (${retries + 1}/${MAX_RETRIES})...`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      return callApi(endpoint, data, retries + 1);
    }
    console.error(`API call error:`, error);
    throw error;
  }
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function enrichLinkedIn(url) {
  if (!url) {
    console.warn('Missing LinkedIn URL for enrichment');
    return null;
  }

  try {
    const socialResult = await callApi('/social-url-enrichment', {
      url: url,
      profile_only: false
    });
    if (!socialResult.error && socialResult.response) {
      trackUsage('linkedinProfiles');
    }
    return socialResult.error ? null : socialResult.response;
  } catch (error) {
    console.error('Social URL Enrichment error:', error);
    return null;
  }
}

async function findPhoneNumber(url) {
  if (!url) {
    console.warn('Missing LinkedIn URL for phone number search');
    return null;
  }

  try {
    const mobileResult = await callApi('/mobile-finder', {
      url: url,
    });
    if (!mobileResult.error && mobileResult.response) {
      trackUsage('phoneNumbers');
    }
    return mobileResult.error ? null : mobileResult.response;
  } catch (error) {
    console.error('Mobile Finder error:', error);
    return null;
  }
}

async function findEmail(firstName, lastName, companyDomain) {
  if (!firstName || !lastName || !companyDomain) {
    console.warn('Missing required data for email search');
    return null;
  }

  try {
    const emailResult = await callApi('/email-finder', {
      first_name: firstName,
      last_name: lastName,
      company: companyDomain,
    });
    if (!emailResult.error && emailResult.response) {
      trackUsage('validEmails');
    }
    return emailResult.error ? null : emailResult.response;
  } catch (error) {
    console.error('Email Finder error:', error);
    return null;
  }
}

export async function processBulkData(data, progressCallback) {
  console.log('Starting bulk data processing:', data);
  const results = [];
  let processed = 0;
  const totalItems = data.length;

  trackBulkEnrichment(1, totalItems); // Track the bulk enrichment file and entry count

  for (const item of data) {
    try {
      // Step 1: LinkedIn Enrichment
      const linkedInData = await enrichLinkedIn(item.profileUrl);
      await delay(1000);
      // Step 2: Phone Number
      const phoneData = await findPhoneNumber(item.profileUrl);
      await delay(1000);
      // Step 3: Email Enrichment (using data from LinkedIn)
      let emailData = null;
      if (linkedInData && linkedInData.company && linkedInData.company.website) {
        emailData = await findEmail(item.firstName, item.lastName, linkedInData.company.website);
        await delay(1000);
      }
      const enrichedItem = {
        firstName: item.firstName,
        lastName: item.lastName,
        profileUrl: item.profileUrl,
        linkedInData,
        phoneData,
        emailData
      };
      results.push(enrichedItem);
    } catch (error) {
      console.error('Error processing item:', item, error);
      results.push({ ...item, error: 'Processing failed' });
    }
    processed++;
    if (progressCallback) {
      progressCallback((processed / totalItems) * 100);
    }
  }
  console.log('Bulk data processing completed:', results);
  return results;
}

export function saveBulkProcessedData(data) {
  console.log('Saving bulk processed data:', data);
  const timestamp = new Date().toISOString();
  const storedData = JSON.parse(localStorage.getItem('bulkProcessedData') || '[]');
  const newData = data.map(item => ({ timestamp, data: item }));
  storedData.push(...newData);
  localStorage.setItem('bulkProcessedData', JSON.stringify(storedData));
  console.log('Bulk processed data saved successfully');
}

export function getBulkProcessedData() {
  const storedData = JSON.parse(localStorage.getItem('bulkProcessedData') || '[]');
  console.log('Retrieved bulk processed data:', storedData);
  return storedData;
}

// Helper function to clear all bulk processed data (useful for testing)
export function clearBulkProcessedData() {
  localStorage.removeItem('bulkProcessedData');
  console.log('Bulk processed data cleared');
}

// Function to clear cache (can be called periodically or when needed)
export function clearCache() {
  cache = {};
  console.log('API cache cleared');
}
----------------------------------------

File:   creditSystem.js

// File: utils/creditSystem.js

const CREDIT_COSTS = {
  linkedinProfile: 1,  // Cost for LinkedIn profile enrichment
  validEmail: 2,      // Cost for any verified email (individual or company)
  phoneNumber: 10,    // Cost for phone number lookup
};

export function calculateCredits(usage) {
  return (
    usage.linkedinProfiles * CREDIT_COSTS.linkedinProfile +
    usage.validEmails * CREDIT_COSTS.validEmail +
    usage.phoneNumbers * CREDIT_COSTS.phoneNumber
  );
}

export function trackUsage(type, count = 1) {
  const usage = JSON.parse(localStorage.getItem('usage') || '{}');
  const date = new Date().toISOString().split('T')[0];

  if (!usage[date]) {
    usage[date] = {
      linkedinProfiles: 0,
      validEmails: 0,
      phoneNumbers: 0,
    };
  }

  usage[date][type] += count;
  localStorage.setItem('usage', JSON.stringify(usage));
}

export function getUsageData(startDate, endDate) {
  const usage = JSON.parse(localStorage.getItem('usage') || '{}');
  const filteredUsage = Object.entries(usage)
    .filter(([date]) => date >= startDate && date <= endDate)
    .reduce((acc, [date, data]) => {
      acc[date] = data;
      return acc;
    }, {});

  const totalUsage = Object.values(filteredUsage).reduce(
    (acc, day) => {
      Object.keys(day).forEach((key) => {
        acc[key] = (acc[key] || 0) + day[key];
      });
      return acc;
    },
    {}
  );

  const dailyCredits = Object.entries(filteredUsage).map(([date, data]) => ({
    date,
    credits: calculateCredits(data),
  }));

  return {
    totalUsage,
    dailyCredits,
    totalCredits: calculateCredits(totalUsage),
  };
}

// Keep the bulk enrichment tracking for file statistics only
export function trackBulkEnrichment(fileCount, entryCount) {
  const bulkData = JSON.parse(localStorage.getItem('bulkEnrichment') || '{}');
  const date = new Date().toISOString().split('T')[0];

  if (!bulkData[date]) {
    bulkData[date] = { files: 0, entries: 0 };
  }

  bulkData[date].files += fileCount;
  bulkData[date].entries += entryCount;

  localStorage.setItem('bulkEnrichment', JSON.stringify(bulkData));
}

export function getBulkEnrichmentData(startDate, endDate) {
  const bulkData = JSON.parse(localStorage.getItem('bulkEnrichment') || '{}');
  const filteredData = Object.entries(bulkData)
    .filter(([date]) => date >= startDate && date <= endDate)
    .reduce((acc, [date, data]) => {
      acc[date] = data;
      return acc;
    }, {});

  return Object.values(filteredData).reduce(
    (acc, day) => {
      acc.files += day.files;
      acc.entries += day.entries;
      return acc;
    },
    { files: 0, entries: 0 }
  );
}
----------------------------------------

File:   individualApiService.js

// File: utils/individualApiService.js

import { trackUsage } from './creditSystem';

const API_BASE_URL = 'https://api.prospeo.io';
const API_KEY = process.env.NEXT_PUBLIC_PROSPEO_API_KEY;
const MAX_RETRIES = 2;
const RETRY_DELAY = 1000; // 1 second

// In-memory cache
let cache = {};

// Function to generate a unique key for caching
function getCacheKey(endpoint, data) {
  return `${endpoint}:${JSON.stringify(data)}`;
}

async function callApi(endpoint, data, retries = 0) {
  const cacheKey = getCacheKey(endpoint, data);

  // Check cache first
  if (cache[cacheKey]) {
    console.log('Returning cached data for:', cacheKey);
    return cache[cacheKey];
  }

  try {
    const response = await fetch('/api/prospeo', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({ endpoint, data }),
    });

    if (!response.ok) {
      const responseData = await response.json();
      throw new Error(`API Error: ${responseData.message}`);
    }

    const result = await response.json();

    // Cache the result
    cache[cacheKey] = result;

    return result;
  } catch (error) {
    if (retries < MAX_RETRIES) {
      console.log(`Retrying API call (${retries + 1}/${MAX_RETRIES})...`);
      await new Promise(resolve => setTimeout(resolve, RETRY_DELAY));
      return callApi(endpoint, data, retries + 1);
    }
    console.error(`API call error:`, error);
    throw error;
  }
}

function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

async function findIndividualEmail(data) {
  if (!data.firstName || !data.lastName || !data.company) {
    console.warn('Missing required data for email search');
    return null;
  }

  try {
    const emailResult = await callApi('/email-finder', {
      first_name: data.firstName,
      last_name: data.lastName,
      company: data.company,
    });

    console.log('Individual email finder response:', emailResult);

    if (!emailResult.error && emailResult.response) {
      // Check email_status directly from response
      const isValid = emailResult.response.email_status === 'VALID';

      if (isValid) {
        console.log('Found valid individual email:', emailResult.response.email);
        trackUsage('validEmails', 1);
      }
    }
    return emailResult.error ? null : emailResult.response;
  } catch (error) {
    console.error('Email Finder error:', error);
    return null;
  }
}

async function getCompanyEmails(company) {
  if (!company) {
    console.warn('Missing company name for domain search');
    return null;
  }

  try {
    const domainResult = await callApi('/domain-search', {
      company: company,
      limit: 50,
      email_type: 'all',
      company_enrichment: true
    });

    console.log('Domain search raw response:', domainResult);

    if (!domainResult.error && domainResult.response && domainResult.response.email_list) {
      // Count valid emails by checking verification.status
      const validEmails = domainResult.response.email_list.filter(email => 
        email.verification && email.verification.status === 'VALID'
      ).length;

      console.log(`Found ${validEmails} valid company emails`);

      if (validEmails > 0) {
        console.log(`Tracking ${validEmails} valid company emails for credits`);
        trackUsage('validEmails', validEmails);
      }
    }
    return domainResult.error ? null : domainResult.response;
  } catch (error) {
    console.error('Domain Search error:', error);
    return null;
  }
}

async function enrichLinkedIn(url) {
  if (!url) {
    console.warn('Missing LinkedIn URL for enrichment');
    return null;
  }

  try {
    const socialResult = await callApi('/social-url-enrichment', {
      url: url,
      profile_only: false
    });
    if (!socialResult.error && socialResult.response) {
      console.log('LinkedIn profile enriched successfully');
      trackUsage('linkedinProfiles');
    }
    return socialResult.error ? null : socialResult.response;
  } catch (error) {
    console.error('Social URL Enrichment error:', error);
    return null;
  }
}

async function findPhoneNumber(url) {
  if (!url) {
    console.warn('Missing LinkedIn URL for phone number search');
    return null;
  }

  try {
    const mobileResult = await callApi('/mobile-finder', {
      url: url,
    });
    if (!mobileResult.error && mobileResult.response) {
      console.log('Phone number found successfully');
      trackUsage('phoneNumbers');
    }
    return mobileResult.error ? null : mobileResult.response;
  } catch (error) {
    console.error('Mobile Finder error:', error);
    return null;
  }
}

export async function enrichIndividualData(data, searchOptions) {
  let enrichedData = {};
  console.log('Starting enrichment with options:', searchOptions);

  const enrichmentTasks = [
    {
      option: 'getCompanyEmails',
      func: getCompanyEmails,
      args: [data.company],
      key: 'domainSearch'
    },
    {
      option: 'findIndividualEmail',
      func: findIndividualEmail,
      args: [data],
      key: 'email'
    },
    {
      option: 'enrichLinkedIn',
      func: enrichLinkedIn,
      args: [data.linkedinUrl],
      key: 'socialEnrichment'
    },
    {
      option: 'findPhoneNumber',
      func: findPhoneNumber,
      args: [data.linkedinUrl],
      key: 'mobile'
    }
  ];

  for (const task of enrichmentTasks) {
    if (searchOptions[task.option]) {
      console.log(`Processing ${task.option}`);
      const result = await task.func(...task.args);
      if (result) {
        enrichedData[task.key] = result;
        console.log(`${task.option} completed successfully:`, result);
      }
      await delay(1000); // 1 second delay between API calls
    }
  }

  return enrichedData;
}

export function saveIndividualProcessedData(data) {
  const timestamp = new Date().toISOString();
  const storedData = JSON.parse(localStorage.getItem('individualProcessedData') || '[]');
  storedData.push({ timestamp, data });
  localStorage.setItem('individualProcessedData', JSON.stringify(storedData));
}

export function getIndividualProcessedData() {
  return JSON.parse(localStorage.getItem('individualProcessedData') || '[]');
}

export function clearCache() {
  cache = {};
  console.log('API cache cleared');
}
----------------------------------------

File:   queueService.js

import { enrichData, saveProcessedData } from './apiService';

const RATE_LIMIT = 5; // Requests per second
const INTERVAL = 1000; // 1 second in milliseconds

export async function processBulkData(data, progressCallback) {
  const results = [];
  let processed = 0;

  for (let i = 0; i < data.length; i += RATE_LIMIT) {
    const batch = data.slice(i, i + RATE_LIMIT);
    const batchPromises = batch.map(item => enrichData(item, {
      findIndividualEmail: true,
      getCompanyEmails: true,
      enrichLinkedIn: true,
      findPhoneNumber: true
    }).catch(error => {
      console.error('Error processing item:', item, error);
      return { ...item, error: 'Processing failed' };
    }));

    const batchResults = await Promise.all(batchPromises);
    results.push(...batchResults);

    // Save each processed item
    batchResults.forEach(result => {
      if (!result.error) {
        saveProcessedData(result);
      }
    });

    processed += batch.length;
    progressCallback((processed / data.length) * 100);

    if (i + RATE_LIMIT < data.length) {
      await new Promise(resolve => setTimeout(resolve, INTERVAL));
    }
  }

  return results;
}
----------------------------------------

File: next.config.js

module.exports = {
  reactStrictMode: true,
}
----------------------------------------

File: postcss.config.js

module.exports = {
  plugins: {
    tailwindcss: {},
    autoprefixer: {},
  },
}
----------------------------------------

File: tailwind.config.js

/** @type {import('tailwindcss').Config} */
module.exports = {
  content: [
    "./pages/**/*.{js,ts,jsx,tsx}",
    "./components/**/*.{js,ts,jsx,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        'purple-light': '#ACA2CD',
        'purple-dark': '#415285',
        'indigo': {
          DEFAULT: '#4F46E5',
          '50': '#EBEAFE',
          '100': '#D7D5FD',
          '200': '#B0ABFB',
          '300': '#8881F8',
          '400': '#6158F6',
          '500': '#4F46E5',
          '600': '#2415DD',
          '700': '#1C10AB',
          '800': '#140B7A',
          '900': '#0C0749'
        },
      },
      fontFamily: {
        sans: ['Inter', 'ui-sans-serif', 'system-ui', '-apple-system', 'BlinkMacSystemFont', 'Segoe UI', 'Roboto', 'Helvetica Neue', 'Arial', 'Noto Sans', 'sans-serif', 'Apple Color Emoji', 'Segoe UI Emoji', 'Segoe UI Symbol', 'Noto Color Emoji'],
      },
      boxShadow: {
        'sm': '0 1px 2px 0 rgba(0, 0, 0, 0.05)',
        DEFAULT: '0 1px 3px 0 rgba(0, 0, 0, 0.1), 0 1px 2px 0 rgba(0, 0, 0, 0.06)',
        'md': '0 4px 6px -1px rgba(0, 0, 0, 0.1), 0 2px 4px -1px rgba(0, 0, 0, 0.06)',
        'lg': '0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05)',
        'xl': '0 20px 25px -5px rgba(0, 0, 0, 0.1), 0 10px 10px -5px rgba(0, 0, 0, 0.04)',
        '2xl': '0 25px 50px -12px rgba(0, 0, 0, 0.25)',
        'inner': 'inset 0 2px 4px 0 rgba(0, 0, 0, 0.06)',
        'none': 'none',
      },
    },
  },
  plugins: [],
}
----------------------------------------

File: tsconfig.json

{
  "compilerOptions": {
    "lib": [
      "dom",
      "dom.iterable",
      "esnext"
    ],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "noEmit": true,
    "incremental": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "node",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve"
  },
  "include": [
    "next-env.d.ts",
    "**/*.ts",
    "**/*.tsx",
    ".next/types/**/*.ts"
  ],
  "exclude": [
    "node_modules"
  ]
}

----------------------------------------

File: package.json

{
  "name": "my-app",
  "version": "0.1.0",
  "private": true,
  "scripts": {
    "dev": "next dev --port 3000 --hostname 0.0.0.0",
    "build": "next build",
    "start": "next start --port 3000 --hostname 0.0.0.0",
    "lint": "next lint"
  },
  "dependencies": {
    "@tailwindcss/forms": "^0.5.9",
    "autoprefixer": "^10.4.20",
    "chart.js": "^4.4.5",
    "date-fns": "^4.1.0",
    "framer-motion": "^11.11.8",
    "lucide-react": "^0.452.0",
    "next": "^14.2.15",
    "postcss": "^8.4.47",
    "react": "^18.3.1",
    "react-chartjs-2": "^5.2.0",
    "react-dom": "^18.2.0",
    "react-icons": "^5.3.0",
    "tailwindcss": "^3.4.13"
  },
  "devDependencies": {
    "@types/node": "^20.11.6",
    "@types/react": "^18.2.48",
    "@types/react-dom": "^18.2.18",
    "eslint": "^8.56.0",
    "eslint-config-next": "^14.1.0",
    "typescript": "^5.3.3"
  }
}

----------------------------------------

File: README.md

Welcome to the NextJS base template bootstrapped using the `create-next-app`. This template supports TypeScript, but you can use normal JavaScript as well.

## Getting Started

Hit the run button to start the development server.

You can start editing the page by modifying `pages/index.tsx`. The page auto-updates as you edit the file.

[API routes](https://nextjs.org/docs/api-routes/introduction) can be accessed on `/api/hello`. This endpoint can be edited in `pages/api/hello.ts`.

The `pages/api` directory is mapped to `/api/*`. Files in this directory are treated as [API routes](https://nextjs.org/docs/api-routes/introduction) instead of React pages.

## Learn More

To learn more about Next.js, take a look at the following resources:

- [Next.js Documentation](https://nextjs.org/docs) - learn about Next.js features and API.
- [Learn Next.js](https://nextjs.org/learn) - an interactive Next.js tutorial.

## Productionizing your Next App

To make your next App run smoothly in production make sure to deploy your project with [Repl Deployments](https://docs.replit.com/hosting/deployments/about-deployments)!

You can also produce a production build by running `npm run build` and [changing the run command](https://docs.replit.com/programming-ide/configuring-repl#run) to `npm run start`.

----------------------------------------

